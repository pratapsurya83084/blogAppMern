{
  "version": 3,
  "sources": ["../../remove-markdown/index.js"],
  "sourcesContent": ["module.exports = function(md, options) {\n  options = options || {};\n  options.listUnicodeChar = options.hasOwnProperty('listUnicodeChar') ? options.listUnicodeChar : false;\n  options.stripListLeaders = options.hasOwnProperty('stripListLeaders') ? options.stripListLeaders : true;\n  options.gfm = options.hasOwnProperty('gfm') ? options.gfm : true;\n  options.useImgAltText = options.hasOwnProperty('useImgAltText') ? options.useImgAltText : true;\n  options.abbr = options.hasOwnProperty('abbr') ? options.abbr : false;\n  options.replaceLinksWithURL = options.hasOwnProperty('replaceLinksWithURL') ? options.replaceLinksWithURL : false;\n  options.htmlTagsToSkip = options.hasOwnProperty('htmlTagsToSkip') ? options.htmlTagsToSkip : [];\n  options.throwError = options.hasOwnProperty('throwError') ? options.throwError : false;\n\n  var output = md || '';\n\n  // Remove horizontal rules (stripListHeaders conflict with this rule, which is why it has been moved to the top)\n  output = output.replace(/^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/gm, '');\n\n  try {\n    if (options.stripListLeaders) {\n      if (options.listUnicodeChar)\n        output = output.replace(/^([\\s\\t]*)([\\*\\-\\+]|\\d+\\.)\\s+/gm, options.listUnicodeChar + ' $1');\n      else\n        output = output.replace(/^([\\s\\t]*)([\\*\\-\\+]|\\d+\\.)\\s+/gm, '$1');\n    }\n    if (options.gfm) {\n      output = output\n      // Header\n        .replace(/\\n={2,}/g, '\\n')\n        // Fenced codeblocks\n        .replace(/~{3}.*\\n/g, '')\n        // Strikethrough\n        .replace(/~~/g, '')\n        // Fenced codeblocks with backticks\n        .replace(/```(?:.*)\\n([\\s\\S]*?)```/g, (_, code) => code.trim());\n    }\n    if (options.abbr) {\n      // Remove abbreviations\n      output = output.replace(/\\*\\[.*\\]:.*\\n/, '');\n    }\n    \n    let htmlReplaceRegex = /<[^>]*>/g\n    if (options.htmlTagsToSkip && options.htmlTagsToSkip.length > 0) {\n      // Create a regex that matches tags not in htmlTagsToSkip\n      const joinedHtmlTagsToSkip = options.htmlTagsToSkip.join('|')\n      htmlReplaceRegex = new RegExp(\n        `<(?!\\/?(${joinedHtmlTagsToSkip})(?=>|\\s[^>]*>))[^>]*>`,\n        'g',\n      )\n    }\n\n    output = output\n      // Remove HTML tags\n      .replace(htmlReplaceRegex, '')\n      // Remove setext-style headers\n      .replace(/^[=\\-]{2,}\\s*$/g, '')\n      // Remove footnotes?\n      .replace(/\\[\\^.+?\\](\\: .*?$)?/g, '')\n      .replace(/\\s{0,2}\\[.*?\\]: .*?$/g, '')\n      // Remove images\n      .replace(/\\!\\[(.*?)\\][\\[\\(].*?[\\]\\)]/g, options.useImgAltText ? '$1' : '')\n      // Remove inline links\n      .replace(/\\[([\\s\\S]*?)\\]\\s*[\\(\\[].*?[\\)\\]]/g, options.replaceLinksWithURL ? '$2' : '$1')\n      // Remove blockquotes\n      .replace(/^(\\n)?\\s{0,3}>\\s?/gm, '$1')\n      // .replace(/(^|\\n)\\s{0,3}>\\s?/g, '\\n\\n')\n      // Remove reference-style links?\n      .replace(/^\\s{1,2}\\[(.*?)\\]: (\\S+)( \".*?\")?\\s*$/g, '')\n      // Remove atx-style headers\n      .replace(/^(\\n)?\\s{0,}#{1,6}\\s*( (.+))? +#+$|^(\\n)?\\s{0,}#{1,6}\\s*( (.+))?$/gm, '$1$3$4$6')\n      // Remove * emphasis\n      .replace(/([\\*]+)(\\S)(.*?\\S)??\\1/g, '$2$3')\n      // Remove _ emphasis. Unlike *, _ emphasis gets rendered only if \n      //   1. Either there is a whitespace character before opening _ and after closing _.\n      //   2. Or _ is at the start/end of the string.\n      .replace(/(^|\\W)([_]+)(\\S)(.*?\\S)??\\2($|\\W)/g, '$1$3$4$5')\n      // Remove single-line code blocks (already handled multiline above in gfm section)\n      .replace(/(`{3,})(.*?)\\1/gm, '$2')\n      // Remove inline code\n      .replace(/`(.+?)`/g, '$1')\n      // // Replace two or more newlines with exactly two? Not entirely sure this belongs here...\n      // .replace(/\\n{2,}/g, '\\n\\n')\n      // // Remove newlines in a paragraph\n      // .replace(/(\\S+)\\n\\s*(\\S+)/g, '$1 $2')\n      // Replace strike through\n      .replace(/~(.*?)~/g, '$1');\n  } catch(e) {\n    if (options.throwError) throw e;\n\n    console.error(\"remove-markdown encountered error: %s\", e);\n    return md;\n  }\n  return output;\n};\n"],
  "mappings": ";;;;;AAAA;AAAA;AAAA,WAAO,UAAU,SAAS,IAAI,SAAS;AACrC,gBAAU,WAAW,CAAC;AACtB,cAAQ,kBAAkB,QAAQ,eAAe,iBAAiB,IAAI,QAAQ,kBAAkB;AAChG,cAAQ,mBAAmB,QAAQ,eAAe,kBAAkB,IAAI,QAAQ,mBAAmB;AACnG,cAAQ,MAAM,QAAQ,eAAe,KAAK,IAAI,QAAQ,MAAM;AAC5D,cAAQ,gBAAgB,QAAQ,eAAe,eAAe,IAAI,QAAQ,gBAAgB;AAC1F,cAAQ,OAAO,QAAQ,eAAe,MAAM,IAAI,QAAQ,OAAO;AAC/D,cAAQ,sBAAsB,QAAQ,eAAe,qBAAqB,IAAI,QAAQ,sBAAsB;AAC5G,cAAQ,iBAAiB,QAAQ,eAAe,gBAAgB,IAAI,QAAQ,iBAAiB,CAAC;AAC9F,cAAQ,aAAa,QAAQ,eAAe,YAAY,IAAI,QAAQ,aAAa;AAEjF,UAAI,SAAS,MAAM;AAGnB,eAAS,OAAO,QAAQ,wEAAwE,EAAE;AAElG,UAAI;AACF,YAAI,QAAQ,kBAAkB;AAC5B,cAAI,QAAQ;AACV,qBAAS,OAAO,QAAQ,mCAAmC,QAAQ,kBAAkB,KAAK;AAAA;AAE1F,qBAAS,OAAO,QAAQ,mCAAmC,IAAI;AAAA,QACnE;AACA,YAAI,QAAQ,KAAK;AACf,mBAAS,OAEN,QAAQ,YAAY,IAAI,EAExB,QAAQ,aAAa,EAAE,EAEvB,QAAQ,OAAO,EAAE,EAEjB,QAAQ,6BAA6B,CAAC,GAAG,SAAS,KAAK,KAAK,CAAC;AAAA,QAClE;AACA,YAAI,QAAQ,MAAM;AAEhB,mBAAS,OAAO,QAAQ,iBAAiB,EAAE;AAAA,QAC7C;AAEA,YAAI,mBAAmB;AACvB,YAAI,QAAQ,kBAAkB,QAAQ,eAAe,SAAS,GAAG;AAE/D,gBAAM,uBAAuB,QAAQ,eAAe,KAAK,GAAG;AAC5D,6BAAmB,IAAI;AAAA,YACrB,UAAW,oBAAoB;AAAA,YAC/B;AAAA,UACF;AAAA,QACF;AAEA,iBAAS,OAEN,QAAQ,kBAAkB,EAAE,EAE5B,QAAQ,mBAAmB,EAAE,EAE7B,QAAQ,wBAAwB,EAAE,EAClC,QAAQ,yBAAyB,EAAE,EAEnC,QAAQ,+BAA+B,QAAQ,gBAAgB,OAAO,EAAE,EAExE,QAAQ,qCAAqC,QAAQ,sBAAsB,OAAO,IAAI,EAEtF,QAAQ,uBAAuB,IAAI,EAGnC,QAAQ,0CAA0C,EAAE,EAEpD,QAAQ,uEAAuE,UAAU,EAEzF,QAAQ,2BAA2B,MAAM,EAIzC,QAAQ,sCAAsC,UAAU,EAExD,QAAQ,oBAAoB,IAAI,EAEhC,QAAQ,YAAY,IAAI,EAMxB,QAAQ,YAAY,IAAI;AAAA,MAC7B,SAAQ,GAAG;AACT,YAAI,QAAQ,WAAY,OAAM;AAE9B,gBAAQ,MAAM,yCAAyC,CAAC;AACxD,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT;AAAA;AAAA;",
  "names": []
}
